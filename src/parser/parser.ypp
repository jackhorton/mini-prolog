/*
 * bison parser generator for MiniProlog
 * CS 456
**/

%{
#include <cstdio>
#include <string>
#include <memory>

void yyerror(char const * s) {
    fprintf(stderr, "%s\n", s);
}

#include "nodes/all.h"
#include "Dictionary.h"
#include "lexer.h"

using namespace prolog::nodes;
using prolog::Dictionary;
using std::unique_ptr;
using std::string;

%}

%union {
    char const* string_val;
    prolog::nodes::AbstractNode* node;
}

%token<string_val> FULL_STOP LITERAL STRING_CONST LPAREN RPAREN AND

%type<node> fact;

%error-verbose

%%

program
    : statements
    ;
    
statements
    : statement FULL_STOP statements
    | /* empty */
    ;

statement
    : fact { Dictionary::get().insert($1); }
    /* | rule */
    ;

fact
    : LITERAL { $$ = new FactNode($1); }
    /* | LITERAL LPAREN arguments RPAREN { $$ = nullptr; } */
    ;

arguments
    : argument AND arguments
    | argument
    ;

argument
    : fact
    ;
